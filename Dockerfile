# Используем базовый образ Python 3.10 на основе Debian slim 
# (минимальный размер, только необходимые компоненты)
FROM python:3.10-slim

# Устанавливаем рабочую директорию внутри контейнера
WORKDIR /app

# Обновляем пакетный менеджер и устанавливаем необходимые системные зависимости:
# - gcc: компилятор GNU для компиляции некоторых Python-пакетов с C-расширениями
# - python3-dev: заголовочные файлы Python для компиляции расширений
# - libpq-dev: библиотеки PostgreSQL для psycopg2 (драйвер PostgreSQL)
# После установки очищаем кэш apt для уменьшения размера образа
RUN apt-get update && apt-get install -y \
    gcc \
    python3-dev \
    libpq-dev \
    && rm -rf /var/lib/apt/lists/*

# Копируем файл зависимостей в контейнер
COPY requirements.txt .

# Устанавливаем зависимости Python
# --no-cache-dir: не сохраняем исходники и кэш pip для уменьшения размера образа
RUN pip install --no-cache-dir -r requirements.txt

# Копируем все файлы проекта в контейнер
COPY . .

# Собираем статические файлы Django
# --noinput: без интерактивных запросов (автоматический режим)
RUN python manage.py collectstatic --noinput

# Команда, которая будет выполнена при запуске контейнера
# Запускаем Django-сервер разработки на всех интерфейсах (0.0.0.0) и порту 8000
CMD ["python", "manage.py", "runserver", "0.0.0.0:8000"]